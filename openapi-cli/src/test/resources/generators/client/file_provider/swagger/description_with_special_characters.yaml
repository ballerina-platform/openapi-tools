openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: This is a sample Pet Store Server based on the OpenAPI 3.0 specification.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /pet:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      parameters:
        - name: auto-unicode
          in: query
          description: "Specifies how to deal with message text that contains characters\
          \ not present in the GSM 03.38 character set.\n\nMessages that contain only\
          \ GSM 03.38 characters are not affected by this setting. \nIf the value\
          \ is `true` then a message containing non-GSM 03.38 characters will be transmitted\
          \ as a Unicode SMS (which is most likely more costly). \n\nPlease note:\
          \ when `auto-unicode` is `true` and the value of the `encoding` property\
          \ is specified as `UNICODE`, the message will always be sent as `UNICODE`.\n\
          \nIf the value is `false` and the `encoding` property is `TEXT` then non-GSM\
          \ 03.38 characters will be replaced by the `?` character.\n\nWhen using\
          \ this setting on the API, you should take case to ensure that your message\
          \ is _clean_.  \n\nInvisible unicode and unexpected characters could unintentionally\
          \ convert an message to `UNICODE`.  A common mistake is to use the backtick\
          \ character (\\`) which is unicode and will turn your `TEXT` message into\
          \ a `UNICODE` message.\n"
          schema:
            type: boolean
            default: false
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema: {}
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: {}