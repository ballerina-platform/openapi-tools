/*
 * Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).
 *
 * WSO2 LLC. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'io.ballerina.plugin'
}

description = 'Ballerina - OpenAPI Tool'

def packageName = "tool.openapi"
def packageOrg = "ballerina"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaTomlFilePlaceHolder = new File("${project.rootDir}/config/resources/ToolBallerina.toml")
def balToolTomlFilePlaceHolder = new File("${project.rootDir}/config/resources/BalTool.toml")
def ballerinaTomlFile = new File("$project.projectDir/Ballerina.toml")
def balToolTomlFile = new File("$project.projectDir/BalTool.toml")
def distributionPath =  "${project.rootDir}/module-ballerina-openapi/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def distributionBinPath = "${distributionPath}/bin"

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-')
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

task publishToLocal {
    dependsOn ":openapi-cli:build"
    dependsOn ":openapi-bal-task-plugin:build"
    dependsOn ":openapi-core:build"
    dependsOn ":ballerina-to-openapi:build"
    doLast {
        project.exec {
            println "distributionBinPath: $distributionBinPath"
            workingDir project.projectDir
            environment 'JAVA_OPTS', '-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true'
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat pack && $distributionBinPath/bal.bat push --repository=local"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal pack && $distributionBinPath/bal push --repository=local"
            }
        }
    }
}

task copyOpenApiTool {
    doLast {
        def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
        def openApiToolCacheSource = "${project.rootDir}/openapi-tool/target/cache/ballerina/tool.openapi"
        if (file(openApiToolCacheSource).exists()) {
            copy {
                from openApiToolCacheSource
                into "${ballerinaDist}/repo/bala/ballerina/tool.openapi"
            }
        }
    }
}

task updateTomlFiles {
    doLast {
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@toml.version@", tomlVersion)
        ballerinaTomlFile.text = newBallerinaToml

        def newBalToolTomlFile = balToolTomlFilePlaceHolder.text.replace("@project.version@", project.version)
        balToolTomlFile.text = newBalToolTomlFile
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the native jar versions\" Ballerina.toml Dependencies.toml BalTool.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the native jar versions' Ballerina.toml Dependencies.toml BalTool.toml"
            }
        }
    }
}

configurations {
    jbalTools
}

dependencies {
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/openapi-tools")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

copyStdlibs.dependsOn unpackJballerinaTools
updateTomlFiles.dependsOn copyStdlibs
updateTomlFiles.dependsOn ":openapi-cli:build"
updateTomlFiles.dependsOn ":openapi-bal-task-plugin:build"
updateTomlFiles.dependsOn ":openapi-core:build"
updateTomlFiles.dependsOn ":ballerina-to-openapi:build"
copyOpenApiTool.dependsOn publishToLocal
build.dependsOn "generatePomFileForMavenPublication"
build.dependsOn publishToLocal
publishToLocal.dependsOn updateTomlFiles
publishToMavenLocal.dependsOn build
publish.dependsOn build
