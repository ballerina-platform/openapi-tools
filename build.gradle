/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
plugins {
    id 'base'
    id 'maven-publish'
    id 'com.github.spotbugs'
    id 'com.github.johnrengelman.shadow'
    id 'de.undercouch.download'
    id 'net.researchgate.release'
    id 'org.javamodularity.moduleplugin' apply false
    id 'org.sonarqube'
    id 'jacoco'
}

apply plugin: "org.javamodularity.moduleplugin"

jacoco {
    toolVersion = "${jacocoVersion}"
}

configurations {
    jacocoAnt
}

dependencies {
    jacocoAnt "org.jacoco:org.jacoco.ant:${jacocoVersion}"
}

allprojects {
    group = 'io.ballerina'
    version = project.version
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }
        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/orgballerinalang-1614'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/*'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    ext {
        snapshotVersion= '-SNAPSHOT'
        timestampedVersionRegex = '.*-\\d{8}-\\d{6}-\\w.*\$'
    }
}

subprojects {
    // Apply Java plugin only to Java modules, not pure Ballerina modules
    if (project.name != 'openapi-tool') {
        apply plugin: 'java'
    }
    configurations {
        ballerinaStdLibs
    }
    dependencies {
        /* Standard libraries */
        ballerinaStdLibs "io.ballerina.stdlib:io-ballerina:${stdlibIoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:http-ballerina:${stdlibHttpVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:log-ballerina:${stdlibLogVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:os-ballerina:${stdlibOsVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:mime-ballerina:${stdlibMimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:crypto-ballerina:${stdlibCryptoVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:auth-ballerina:${stdlibAuthVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:time-ballerina:${stdlibTimeVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:cache-ballerina:${stdlibCacheVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:task-ballerina:${stdlibTaskVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:file-ballerina:${stdlibFileVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:jwt-ballerina:${stdlibJwtVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:oauth2-ballerina:${stdlibOAuth2Version}"
        ballerinaStdLibs "io.ballerina.stdlib:uuid-ballerina:${stdlibUuidVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:url-ballerina:${stdlibUrlVersion}"
        ballerinaStdLibs "io.ballerina.lib:data.xmldata-ballerina:${stdlibDataXmldataVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:observe-ballerina:${observeVersion}"
        ballerinaStdLibs "io.ballerina:observe-ballerina:${observeInternalVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:graphql-ballerina:${stdlibGraphqlVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:grpc-ballerina:${stdlibGrpcVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:websub-ballerina:${stdlibWebsubVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:websocket-ballerina:${stdlibWebsocketVersion}"
        ballerinaStdLibs "io.ballerina.stdlib:constraint-ballerina:${stdlibConstraintVersion}"
        ballerinaStdLibs "io.ballerina.lib:data.jsondata-ballerina:${stdlibDataJsonDataVersion}"

    }
}

task createProperties(dependsOn: processResources) {
    doLast {
        def clientNativeVersionFile = 
            new File("$project.rootDir/openapi-cli/src/main/resources/openapi-client-native-version.properties")
        clientNativeVersionFile.text = "version=${clientNativeVersion}"
    }
}

classes {
    dependsOn createProperties
}

def moduleVersion = project.version.replace("-SNAPSHOT", "")

release {
    // Disable check snapshots temporarily
    failOnPublishNeeded = false
    buildTasks = ['buildProject']
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v${version}'
    git {
        // To release from any branch
        requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

task buildProject {
    dependsOn(createProperties)
    dependsOn('module-ballerina-openapi:build')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
task codeCoverageReport(type: JacocoReport) {
    dependsOn = subprojects.findAll { it.name != 'openapi-tool' }.test
    dependsOn(":openapi-extension-tests:jacocoTestReport")
    dependsOn(":openapi-integration-tests:jacocoTestReport")
    dependsOn(":openapi-cli:jacocoTestReport")
    dependsOn(":openapi-validator:jacocoTestReport")
    dependsOn(":openapi-tool:build")

    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")

    subprojects.each {
        if (it.plugins.hasPlugin('jacoco')) {
            sourceSets it.sourceSets.main
        }
    }

    jacocoClasspath = configurations.jacocoAnt
    reports {
        xml.required = true
        html.required = true
        csv.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/report.xml")
        html.outputLocation = file("${buildDir}/reports/jacoco/report.html")
        csv.outputLocation = file("${buildDir}/reports/jacoco/report.csv")
    }

    onlyIf = {
        true
    }
}

sonar {
    properties {
        property "sonar.projectKey", "ballerina-platform_openapi-tools"
        property "sonar.organization", "ballerina-platform"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

