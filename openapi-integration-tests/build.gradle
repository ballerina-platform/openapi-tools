/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

description = 'Ballerina to OpenAPI Integration Tests'
apply from: "$rootDir/gradle/javaProject.gradle"

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'

configurations {
    balTools
    ballerinaToOAS
}

dependencies {
    testImplementation group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-tools-api', version: "${ballerinaLangVersion}"
    testImplementation group: 'org.ballerinalang', name: 'ballerina-parser', version: "${ballerinaLangVersion}"
    testImplementation "org.testng:testng:${testngVersion}"
    testImplementation "net.lingala.zip4j:zip4j:${netLingalaZip4jVersion}"
    testImplementation "commons-io:commons-io:${commonsIoVersion}"
    testImplementation "org.apache.commons:commons-lang3:${commonsLang3Version}"

    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}
def ballerinaDistribution = file("$project.rootDir/module-ballerina-openapi/build/target/extracted-distributions/jballerina-tools-zip/")
def bDistribution = file("$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}")
def targetOpenApiModule = file("$project.rootDir/module-ballerina-openapi/build/")
task jBallerinaPack {
    doLast {
        copy {
            from ballerinaDistribution
            into new File(project.buildDir, "extracted-distribution/")
        }
    }
}

task copyOpenAPI() {
    doLast {
        copy {
            from "${targetOpenApiModule}/cache_parent/bala"
            into file("${bDistribution}/repo/bala/")
        }
        copy {
            from file("${targetOpenApiModule}/cache_parent/cache")
            exclude '**/*-testable.jar'
            exclude '**/tests_cache/'
            into("${bDistribution}/repo/cache/")
        }

        copy {
            from file("${targetOpenApiModule}/lib_parent/libs")
            into("${bDistribution}/bre/lib/")
        }
    }
}

test {
    systemProperties =  [ jacocoAgentLine: "-javaagent:${configurations.jacocoRuntime.asPath}=destfile=${test.jacoco.destinationFile.absolutePath},append=true,inclnolocationclasses=true,exclclassloader=jdk.internal.reflect.DelegatingClassLoader" ,
                          "distributions.dir": bDistribution,
                          "target.dir": "$project.buildDir"
    ]

    useTestNG() {
        suites "src/test/resources/testng.xml"
    }
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    def classFiles = new File("${rootDir}/openapi-cli/build/classes/java/main/io/ballerina/openapi")
    def validatorClassFiles = new File("${rootDir}/openapi-validator/build/classes/java/main/io/ballerina/openapi" +
            "/validator")
    def buildClassFiles = new File("${rootDir}/openapi-build-extension/build/classes/java/main/io/ballerina" +
            "/openapi/build")
    additionalClassDirs(classFiles)
    additionalClassDirs(validatorClassFiles)
    additionalClassDirs(buildClassFiles)
    reports {
        xml.required = true
        html.required = true
        csv.required = true
        xml.destination = new File("${buildDir}/reports/jacoco/report.xml")
        html.destination = new File("${buildDir}/reports/jacoco/report.html")
        csv.destination = new File("${buildDir}/reports/jacoco/report.csv")
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
copyOpenAPI.dependsOn jBallerinaPack
test.dependsOn copyOpenAPI
test.dependsOn ":module-ballerina-openapi:build"
