import org.apache.tools.ant.taskdefs.condition.Os

/*
 *  Copyright (c) 2024, WSO2 LLC. (http://www.wso2.org).
 *
 *  WSO2 LLC. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */

plugins {
    id 'java'
    id 'checkstyle'
    id 'com.github.spotbugs'
    id 'jacoco'
}

apply from: "$rootDir/gradle/javaProject.gradle"

description = "OpenAPI Tooling - OpenAPI generated client native utils"

def distributionBinPath = project.rootDir.absolutePath + "/module-ballerina-openapi/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"
def ballerinaTomlFilePlaceHolder = new File("${project.projectDir}/build-configs/resources/Ballerina.toml")
def ballerinaTomlFile = new File("$project.projectDir/ballerina-tests/Ballerina.toml")

dependencies {
    implementation "org.ballerinalang:ballerina-runtime"
}

checkstyle {
    toolVersion '10.12.0'
    configFile rootProject.file("config/checkstyle/build/checkstyle.xml")
    configProperties = ["suppressionFile" : file("${rootDir}/config/checkstyle/build/suppressions.xml")]
}

def excludePattern = '**/module-info.java'
tasks.withType(Checkstyle) {
    exclude excludePattern
}

checkstyleMain.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")
checkstyleTest.dependsOn(":checkstyle:downloadCheckstyleRuleFiles")

spotbugsMain {
    effort "max"
    reportLevel "low"
    reportsDir = file("$project.buildDir/reports/spotbugs")
    def excludeFile = file("${rootDir}/spotbugs-exclude.xml")
    if (excludeFile.exists()) {
        it.excludeFilter = excludeFile
    }
    reports {
        html.enabled true
    }
}

spotbugsTest {
    enabled = false
}

def githubReleaseVersion = project.clientNativeVersion
if (githubReleaseVersion.endsWith('-SNAPSHOT')) {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd-HHmmss', TimeZone.getTimeZone('Asia/Kolkata'))
    def lastCommitId = 'git rev-parse --short HEAD'.execute().text.trim()
    githubReleaseVersion = githubReleaseVersion.replace("-SNAPSHOT", "-${formattedDate}-${lastCommitId}")
}

publishing {
    publications {
        GitHub(MavenPublication) {
            groupId "io.ballerina.openapi"
            artifactId "client-native"
            version = githubReleaseVersion
            artifact jar
        }
        WSO2Nexus(MavenPublication) {
            groupId "io.ballerina.openapi"
            artifactId "client-native"
            version = clientNativeVersion
            artifact jar
        }
    }

    repositories {
        maven {
            name = "GitHub"
            url = uri("https://maven.pkg.github.com/ballerina-platform/openapi-tools")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
        maven {
            name = "WSO2Nexus"
            if(project.clientNativeVersion.endsWith('-SNAPSHOT')) {
                url "https://maven.wso2.org/nexus/content/repositories/snapshots/"
            } else {
                url "https://maven.wso2.org/nexus/service/local/staging/deploy/maven2/"
            }
            credentials {
                username System.getenv("nexusUser")
                password System.getenv("nexusPassword")
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.GitHub && publication == publishing.publications.GitHub) ||
                (repository == publishing.repositories.WSO2Nexus && publication == publishing.publications.WSO2Nexus)
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

jar {
    archiveFileName = "openapi-client-native-${clientNativeVersion}.jar"
}

task updateTomlFile {
    dependsOn(jar)
    doLast {
        def newBallerinaToml = ballerinaTomlFilePlaceHolder.text.replace("@client.native.version@", clientNativeVersion)
        ballerinaTomlFile.text = newBallerinaToml
    }
}

task commitTomlFiles {
    doLast {
        project.exec {
            ignoreExitValue true
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "git commit -m \"[Automated] Update the toml files for client native tests\" ballerina-tests/Ballerina.toml ballerina-tests/Dependencies.toml"
            } else {
                commandLine 'sh', '-c', "git commit -m '[Automated] Update the toml files for client native tests' ballerina-tests/Ballerina.toml ballerina-tests/Dependencies.toml"
            }
        }
    }
}

task ballerinaTests {
    dependsOn(":module-ballerina-openapi:build")
    dependsOn(updateTomlFile)
    dependsOn(jar)
    finalizedBy(commitTomlFiles)

    doLast {
        exec {
            workingDir "${project.projectDir}/ballerina-tests"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat test --offline && exit " +
                        "%%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "${distributionBinPath}"+'/bal test --offline'
            }
        }
    }
}

test.dependsOn(ballerinaTests)
build.dependsOn(test)
