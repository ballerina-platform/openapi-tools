/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import org.apache.tools.ant.taskdefs.condition.Os
description = 'Ballerina - OpenAPI Ballerina Generator'

configurations {
    jbalTools
}

dependencies {
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    implementation project(':ballerina-to-openapi')
    implementation project(':openapi-validator')
    implementation project(':openapi-core')
    implementation project(':openapi-cli')
    implementation project(':openapi-bal-task-plugin')
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/build"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

def packageName = "openapi"
def packageOrg = "ballerina"
def platform = "java21"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaConfigFilePlaceHolder = new File("${project.rootDir}/config/resources/Ballerina.toml")
def ballerinaCompileConfigFilePlaceHolder = new File("${project.rootDir}/config/resources/CompilerPlugin.toml")
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaCompileConfigFile = new File("$project.projectDir/CompilerPlugin.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def targetNativeJar = file("""$project.rootDir/${packageName}-validator/build/libs/${packageName}-validator-${project.version}.jar""")
def distributionPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def distributionBinPath = distributionPath + "/bin"
def originalConfig = ballerinaConfigFile.text
def originalCompilerConfig = ballerinaCompileConfigFile.text
def artifactTestableJar = file("$project.projectDir/target/cache/${packageOrg}/${packageName}/${tomlVersion}/any/")
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

task copyOpenApiTool {
    doLast {
        def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
        def openApiCacheSource = "build/cache_parent/bala/ballerina/openapi"
        if (file(openApiCacheSource).exists()) {
            copy {
                from openApiCacheSource
                into "${ballerinaDist}/repo/bala/ballerina/openapi"
            }
        }
    }
}

task updateTomlFile {
    doLast {
        def stdlibDependentIoVersion = stripBallerinaExtensionVersion(project.stdlibIoVersion)
        def stdlibDependentLogVersion = stripBallerinaExtensionVersion(project.stdlibLogVersion)

        def newConfig = ballerinaConfigFilePlaceHolder.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newConfig = newConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        ballerinaConfigFile.text = newConfig
    }
}

task updateCompilerTomlFile {
    doLast {
        def stdlibDependentIoVersion = stripBallerinaExtensionVersion(project.stdlibIoVersion)
        def stdlibDependentLogVersion = stripBallerinaExtensionVersion(project.stdlibLogVersion)

        def newConfig = ballerinaCompileConfigFilePlaceHolder.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newConfig = newConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        ballerinaCompileConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaCompileConfigFile.text = originalCompilerConfig
    }
}

// Publish to central y*
def needPublishToCentral = false
def needPublishToLocalCentral = false

task initializeVariables {
    if (project.hasProperty("publishToLocalCentral") && (project.findProperty("publishToLocalCentral") == "true")) {
        needPublishToLocalCentral = true
    }
    if (project.hasProperty("publishToCentral") && (project.findProperty("publishToCentral") == "true")) {
        needPublishToCentral = true
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-ballerina:build") || graph.hasTask(":${packageName}-ballerina:publish") ||
                graph.hasTask(":${packageName}-ballerina:publishToMavenLocal")) {

            if (graph.hasTask(":${packageName}-ballerina:publish")) {
                needPublishToCentral = true
            }
        }
    }
}

task ballerinaBuild {
    inputs.dir file(project.projectDir)
    doNotTrackState("build needs to run every time")
    doLast {
        // Build and populate caches
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat pack && exit " +
                        "%%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "${distributionBinPath}"+'/bal pack'
            }
        }

        // extract bala file to artifact cache directory
        file("$project.projectDir/target/bala").eachFileMatch(~/.*.bala/) { balaFile ->
            copy {
                from zipTree(balaFile)
                into file("$artifactCacheParent/bala/${packageOrg}/${packageName}/${tomlVersion}/${platform}")
            }
        }

        copy {
            from file("$project.projectDir/target/cache")
            exclude '**/*-testable.jar'
            exclude '**/tests_cache/'
            into file("$artifactCacheParent/cache/")
        }

        copy {
            from targetNativeJar
            into file("$artifactLibParent/libs")
        }

        // Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc  && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal doc "
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${packageName}")
            into file("$project.projectDir/build/docs_parent/docs/${packageName}")
        }

        if (needPublishToCentral) {
            if (project.version.endsWith('-SNAPSHOT') ||
                    project.version.matches(project.ext.timestampedVersionRegex)) {
                return
            }
            if (ballerinaCentralAccessToken != null) {
                println("Publishing to the ballerina central..")
                exec {
                    workingDir project.projectDir
                    environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "$distributionBinPath/bal push"
                    }
                }
            } else {
                throw new InvalidUserDataException("Central Access Token is not present")
            }
        } else if (needPublishToLocalCentral) {
            println("Publishing to the ballerina local central repository..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%% --repository=local"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal push --repository=local"
                }
            }
        }
        ballerinaConfigFile.text = originalConfig
        ballerinaCompileConfigFile.text = originalCompilerConfig
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("${buildDir}/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/openapi-tools")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

unpackStdLibs.dependsOn unpackJballerinaTools
copyStdlibs.dependsOn unpackStdLibs
copyOpenApiTool.dependsOn unpackJballerinaTools
copyOpenApiTool.dependsOn ':openapi-tool:build'
updateTomlFile.dependsOn copyStdlibs
updateTomlFile.dependsOn copyOpenApiTool
updateCompilerTomlFile.dependsOn updateTomlFile

ballerinaBuild.dependsOn ":ballerina-to-${packageName}:build"
ballerinaBuild.dependsOn ":${packageName}-cli:build"
ballerinaBuild.dependsOn ":${packageName}-validator:build"
ballerinaBuild.dependsOn ":${packageName}-bal-task-plugin:build"
ballerinaBuild.dependsOn updateCompilerTomlFile
ballerinaBuild.dependsOn initializeVariables
ballerinaBuild.dependsOn generatePomFileForMavenJavaPublication
ballerinaBuild.dependsOn compileJava
ballerinaBuild.dependsOn compileTestJava
ballerinaBuild.dependsOn checkstyleMain
ballerinaBuild.dependsOn checkstyleTest
ballerinaBuild.dependsOn jar
ballerinaBuild.finalizedBy revertTomlFile
ballerinaBuild.dependsOn test
build.dependsOn ballerinaBuild

publishToMavenLocal.dependsOn build
publish.dependsOn build
