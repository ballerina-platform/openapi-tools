/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

apply from: "$rootDir/gradle/javaProject.gradle"

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
description = 'Ballerina - OpenAPI - Validator'

configurations.all {
    resolutionStrategy {
        preferProjectModules()
    }
}

configurations {
    balTools
}

dependencies {
    implementation "io.swagger.core.v3:swagger-models"
    implementation ("io.swagger.parser.v3:swagger-parser:${swaggerParserVersion}") {
        exclude group: "io.swagger", module: "swagger-compat-spec-parser"
        exclude group: "org.slf4j", module: "slf4j-ext"
        exclude group: "javax.validation", module: "validation-api"
    }
    implementation "org.ballerinalang:ballerina-lang"
    implementation "org.ballerinalang:ballerina-tools-api"
    implementation "org.ballerinalang:ballerina-parser"
    implementation "org.ballerinalang:ballerina-cli"
    testImplementation "org.testng:testng"

    balTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

def bDistribution = file("$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}")

task jBallerinaPack {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
    outputs.dir bDistribution
}

task copyOpenAPI() {
    doLast {
        copy {
            from file("${project.buildDir}/libs")
            into("${bDistribution}/bre/lib/")
        }
    }
}

task unpackStdLibs() {
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-distribution/" + artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    dependsOn(unpackStdLibs)
    dependsOn(copyOpenAPI)
    def ballerinaDist = "$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${project.buildDir}/extracted-distribution/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    enabled = false
    dependsOn(shadowJar { archiveClassifier = null })
}

shadowJar {
    configurations = [project.configurations.runtimeClasspath]
    dependencies {
        include(dependency('commons-io:commons-io'))
        include(dependency('javax.validation:validation-api'))
        include(dependency('io.swagger:swagger-core'))
        include(dependency('io.swagger:swagger-models'))
        include(dependency('io.swagger:swagger-parser'))
        include(dependency('io.swagger.core.v3:swagger-core'))
        include(dependency('io.swagger.core.v3:swagger-models'))
        include(dependency('io.swagger.parser.v3:swagger-parser'))
        include(dependency('io.swagger.parser.v3:swagger-parser-core'))
        include(dependency('io.swagger.parser.v3:swagger-parser-v3'))
        exclude('META-INF/*.SF')
        exclude('META-INF/*.DSA')
        exclude('META-INF/*.RSA')
    }
}

test {
    dependsOn {
        copyStdlibs
    }
    systemProperty "ballerina.home", bDistribution
    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

