/*
 *  Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 */


apply from: "$rootDir/gradle/javaProject.gradle"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "java-library"

description = "Ballerina - OpenAPI Tooling - Ballerina to OpenAPI Command"

configurations.all {
    resolutionStrategy.preferProjectModules()
}

configurations {
    balTools
}

dependencies {
    implementation project(':ballerina-to-openapi')
    implementation ("io.swagger.parser.v3:swagger-parser:${swaggerParserVersion}") {
        exclude group: "io.swagger", module: "swagger-compat-spec-parser"
        exclude group: "org.slf4j", module: "slf4j-ext"
        exclude group: "javax.validation", module: "validation-api"
    }
    implementation "io.swagger.core.v3:swagger-models"
    implementation "javax.ws.rs:javax.ws.rs-api"
    implementation "com.github.jknack:handlebars"
    implementation "info.picocli:picocli"
    implementation "org.ballerinalang:ballerina-lang"
    implementation "org.ballerinalang:ballerina-parser"
    implementation "org.ballerinalang:ballerina-tools-api"
    implementation "org.ballerinalang:language-server-commons"
    implementation "org.eclipse.lsp4j:org.eclipse.lsp4j:0.8.1"
    implementation "com.google.code.findbugs:jsr305"
    implementation 'com.google.code.gson:gson:2.8.8'
    testImplementation "org.testng:testng"

    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}

def bDistribution = file("$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}")
task jBallerinaPack {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
    outputs.dir bDistribution
}

task unpackStdLibs() {
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-distribution/" + artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    dependsOn(unpackStdLibs)
    def ballerinaDist = "$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${project.buildDir}/extracted-distribution/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

test {
    dependsOn {
        copyStdlibs
    }
    systemProperty "ballerina.home", bDistribution

    useTestNG() {
        suites "src/test/resources/testng.xml"
    }
}


shadowJar {
    configurations = [project.configurations.runtimeClasspath]
    dependencies {
        include(dependency(':ballerina-to-openapi'))
        include(dependency('com.github.jknack:handlebars'))
        include(dependency('org.antlr:antlr4:4.5'))
        include(dependency('io.swagger.parser.v3:swagger-parser'))
        include(dependency('com.atlassian.commonmark:commonmark'))
        include(dependency('com.atlassian.commonmark:commonmark-ext-gfm-tables'))
        exclude('META-INF/*.SF')
        exclude('META-INF/*.DSA')
        exclude('META-INF/*.RSA')
    }
}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
